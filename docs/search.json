[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Chem symbol test",
    "section": "",
    "text": "This is a simple chemical symbol test. Youâ€™ll be tested on chemical elements and their names.\n#| viewerHeight: 300\n#| standalone: true\n\nchem &lt;- data.frame(\n  symbol = c(\"Al\", \"Sb\", \"Ar\", \"As\", \"Ba\", \"Be\", \"Bi\", \n             \"B\", \"Br\", \"Cd\", \"Ca\", \"C\", \"Cs\", \"Cl\", \"Cr\",\n             \"Co\", \"Cu\", \"F\", \"Au\", \"He\", \"H\", \"I\", \"Fe\",\n             \"Kr\", \"Pb\", \"Li\", \"Mg\", \"Mn\", \"Hg\", \"Ne\", \"Ni\",\n             \"N\", \"O\", \"P\", \"Pt\", \"K\", \"Rn\", \"Se\", \"Si\", \"Ag\",\n             \"Na\", \"Sr\", \"S\", \"Te\", \"Sn\", \"Ti\", \"W\",\n             \"U\", \"V\", \"Xe\", \"Zn\", \"Zr\"),\n  name = c(\"aluminum\", \"antimony\", \"argon\", \"arsenic\", \"barium\", \"beryllium\", \"bismuth\", \n           \"boron\", \"bromine\",\"cadmium\", \"calcium\", \"carbon\", \"cesium\", \"chlorine\", \"chromium\",\n           \"cobalt\", \"copper\", \"fluorine\", \"gold\", \"helium\", \"hydrogen\", \"iodine\", \"iron\",\n           \"krypton\", \"lead\", \"lithium\", \"magnesium\", \"mangenese\", \"mercury\", \"neon\", \"nickel\",\n           \"nitrogen\", \"oxygen\", \"phosphorus\", \"platinum\", \"potassium\", \"radon\", \"selenium\", \"silicon\", \"silver\",\n           \"sodium\", \"strontium\", \"sulfur\", \"tellurium\", \"tin\", \"titanium\", \"tungsten\",\n           \"uranium\", \"vanadium\", \"xenon\", \"zinc\", \"zirconium\")\n)\n\nui &lt;- fluidPage(\n  fluidRow(\n    column(5, offset = 1, checkboxGroupInput(\"chk_options\", \"Test me on\", choices = names(chem), selected = \"symbol\", inline = TRUE))\n  ),\n  fluidRow(\n    column(5, offset = 1, uiOutput(\"ui_question\")),\n    column(5, \n           fluidRow(uiOutput(\"ui_score\")),\n           fluidRow(uiOutput(\"ui_streak\"))\n           )\n  )\n  \n)\n\nserver &lt;- function(input, output, session) {\n\n  last_num &lt;- 0\n  rv &lt;- reactiveValues(\n    question_count = 0,\n    score = 0,\n    question_type = NULL,\n    question = NULL,\n    answer = NULL,\n    streak = 0\n  )\n  \n  question_index &lt;- reactive({\n    rv$question_count\n    num &lt;- last_num\n    while (num == last_num) {\n      num &lt;- sample(nrow(chem), size = 1)\n    }\n    last_num &lt;- num\n  })\n  \n  output$ui_question &lt;- renderUI({\n    if (length(input$chk_options) &gt; 0) {\n      rv$question_type &lt;- sample(input$chk_options, size = 1)\n      answer_type &lt;- names(chem)[!names(chem) == rv$question_type]\n      rv$question &lt;- chem[[rv$question_type]][question_index()]\n      rv$answer &lt;- chem[[answer_type]][question_index()]\n      tagList(\n        h3(paste(answer_type, \"for:\", rv$question)),\n        textInput(\"txt_answer\", label = NULL),\n        actionButton(\"but_answer\", \"Submit\")\n      )\n    }\n  })\n  \n  observeEvent(input$but_answer, {\n    if (rv$question_type == \"symbol\") {\n      answer &lt;- tolower(input$txt_answer)\n    } else {\n      answer &lt;- input$txt_answer\n    }\n    if (answer == rv$answer) {\n      rv$score &lt;- rv$score + 1\n      rv$streak &lt;- rv$streak + 1\n      showNotification(ui = \"CORRECT!\", type = \"message\")\n    } else {\n      rv$streak &lt;- 0\n      showNotification(ui = paste0(\"WRONG.  Correct answer is \", rv$answer), type = \"error\")\n    }\n    rv$question_count &lt;- rv$question_count + 1\n  })\n  \n  output$ui_score &lt;- renderUI({\n    h3(paste0(\"Score: \", rv$score, \"/\", rv$question_count), style = \"color: #388E3C\")\n  })\n  \n  output$ui_streak &lt;- renderUI({\n    if (rv$streak &gt; 29) {\n      col &lt;- \"#2E7D32\"\n    } else if (rv$streak &gt; 19) {\n      col &lt;- \"#00838F\"\n    } else if (rv$streak &gt; 9) {\n      col &lt;- \"#1E88E5\"\n    } else if (rv$streak &gt; 0) {\n      col &lt;- \"#8E24AA\"\n    } else {\n      col &lt;- \"#E53935\"\n    }\n    h3(paste0(\"Streak: \", rv$streak), style = paste0(\"color: \", col))\n  })\n\n}\n\napp &lt;- shinyApp(ui = ui, server = server)"
  }
]